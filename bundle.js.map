{"version":3,"sources":["webpack:///webpack/bootstrap 8d79cc36c8ef79e4448b","webpack:///./lib/bubble.js","webpack:///./lib/board.js","webpack:///./lib/bubble_whammy.js","webpack:///./lib/game.js","webpack:///./lib/player.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;;AAEA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,YAAY;AACZ;;AAEA;;AAEA;;;;;;;;;AC5EA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;AC/DA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;ACTD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2JAAyG;AACzG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;;;AAGA;;;;;;;;;ACrgBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+IAA6F,qCAAqC;AAClI,oJAAkG;AAClG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8d79cc36c8ef79e4448b","const colors = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"white\"];\n\nclass Bubble {\n  constructor(x, y, color = null, loaded = false, pos = {}, state = \"empty\", angle = 0) {\n    this.x = x;\n    this.y = y;\n    this.pos = pos;\n    this.gridPos = {};\n    this.color = color;\n    this.angle = angle;\n    this.loaded = loaded;\n    this.speed = 20;\n    this.state = state;\n    this.shifted = false;\n    }\n\n    degreesToRadians(angle) {\n      return angle * (Math.PI / 180);\n    }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    if (this.loaded === false) {\n      this.pos = this.getScreenPos(this, this.x, this.y);\n      this.gridPos = this.getGridPos(this, this.pos.x, this.pos.y);\n    }\n    if (this.loaded) {\n      this.pos.x += this.speed * Math.cos(this.degreesToRadians(this.angle));\n      this.pos.y += this.speed * -1 * Math.sin(this.degreesToRadians(this.angle));\n        if (this.pos.x >= 515) {\n          this.angle = Math.abs(180 - this.angle);\n        } else if (this.pos.x <= 35) {\n          this.angle = 180 - this.angle;\n        } else if (this.pos.y <= 5) {\n          this.pos.y = 0;\n          this.gridPos = this.getGridPos(this, this.pos.x, this.pos.y);\n        }\n    }\n    ctx.arc(this.pos.x, this.pos.y, 17, 30, 2*Math.PI, true);\n    if (this.state === \"full\"){\n      ctx.fill();\n    }\n}\n\n  getGridPos(bubble, xPos, yPos) {\n    let y = Math.floor(yPos / 33.3);\n    let offset = 0;\n    if (bubble.shifted) {\n      offset = 16.65;\n    }\n    let x = Math.floor((xPos - offset) / 33.3);\n    return { x: x - 1, y: y - 1 };\n  }\n\n  getScreenPos(bubble, col, row) {\n    let x;\n    if (col === 0) {\n      x = 33.3;\n    } else {\n        x = (col * 33.3) + 33.3;\n    }\n    if (bubble.shifted) {\n      x += 16.65;\n    }\n    let y;\n    if (row === 0) {\n      y = 33.3;\n    } else {\n        y = (row * 33.3) + 33.3;\n    }\n    return { x: x, y: y};\n  }\n\n}\n\nexport default Bubble;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/bubble.js\n// module id = 0\n// module chunks = 0","import Bubble from './bubble';\nconst colors = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"white\"];\n\nclass Board {\n  constructor() {\n    this.grid = [];\n  }\n\n  createRow() {\n    const row = [];\n    for(let i = 0; i < 15; i++) {\n      let color = colors[Math.floor(Math.random()*colors.length)];\n      let bubble = new Bubble(i, 0, color);\n      bubble.pos = bubble.getScreenPos(bubble, bubble.x, bubble.y);\n      bubble.state = \"full\";\n      if (this.grid.length < 1 || this.grid[0][0].shifted) {\n        bubble.shifted = false;\n      } else {\n        bubble.shifted = true;\n      }\n      row.push(bubble);\n    }\n    return row;\n  }\n\n  shiftRow() {\n    this.grid.forEach(row => {\n      row.forEach(bubble => {\n          bubble.y += 1;\n          bubble.pos = bubble.getScreenPos(bubble, bubble.x, bubble.y);\n      });\n    });\n    this.removeRow();\n    return this.grid.unshift(this.createRow());\n  }\n\n  removeRow() {\n    if (this.grid.length === 15) {\n    return this.grid.pop();\n    }\n  }\n\n  populate() {\n    this.grid.unshift(this.createRow());\n    for(let i = 0; i < 6; i++) {\n      this.shiftRow();\n    }\n    for(let l = 7; l < 18; l++) {\n      let emptyRow = [];\n      for(let j = 0; j < 15; j++) {\n        let bubble = new Bubble(j, l);\n        bubble.pos = bubble.getScreenPos(bubble, bubble.x, bubble.y);\n        if (!this.grid[bubble.y - 1][bubble.x].shifted) {\n          bubble.shifted = true;\n        }\n        emptyRow.push(bubble);\n      }\n      this.grid.push(emptyRow);\n    }\n  }\n\n}\n\nexport default Board;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/board.js\n// module id = 1\n// module chunks = 0","import Game from './game.js';\nimport Board from './board.js';\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"gameBoard\");\n  const ctx = canvas.getContext(\"2d\");\n  const game = new Game(ctx, canvas);\n  game.start();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/bubble_whammy.js\n// module id = 2\n// module chunks = 0","import Board from './board';\nimport Player from './player';\nimport Bubble from './bubble';\n\nconst colors = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"white\"];\n\nlet newBoard = new Board();\nnewBoard.populate();\n\nclass Game {\n  constructor(ctx, canv, board = newBoard) {\n    this.ctx = ctx;\n    this.canv = canv;\n    this.board = board;\n    this.player = new Player(board);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleGameOver = this.handleGameOver.bind(this);\n    this.state = 'ready';\n    this.turns = 0;\n    this.score = 0;\n  }\n\n  handleMove(e) {\n    const mousePos = this.getMousePos(this.canv, e);\n    let mouseAngle = this.radiansToDegrees(Math.atan2((this.player.y) - mousePos.y, mousePos.x - (this.player.x)));\n    if (mouseAngle < 0) {\n      mouseAngle = 180 + (180 + mouseangle);\n    }\n    let lbound = 20;\n    let ubound = 160;\n    if (mouseAngle > 90 && mouseAngle < 270) {\n      if (mouseAngle > ubound) {\n        mouseAngle = ubound;\n      }\n    } else {\n      if (mouseAngle < lbound || mouseAngle >= 270) {\n        mouseAngle = lbound;\n      }\n    }\n    this.player.angle = mouseAngle;\n  }\n\n  handleGameOver(e) {\n    if (this.state === 'gameover') {\n      this.state = 'ready';\n      this.turns = 0;\n      this.score = 0;\n      this.board = new Board();\n      this.board.populate();\n      this.player.board = this.board;\n    }\n  }\n\n  start() {\n    this.canv.addEventListener('mousemove', this.handleMove);\n    this.canv.addEventListener('mousedown', this.handleClick);\n    this.canv.addEventListener('mousedown', this.handleGameOver);\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  renderBubbles() {\n    this.board.grid.forEach(row => {\n      row.forEach(bubble => {\n          bubble.draw(this.ctx);\n      });\n    });\n  }\n\n  radiansToDegrees(angle) {\n    return angle * (180 / Math.PI);\n  }\n\n  degreesToRadians(angle) {\n    return angle * (Math.PI / 180);\n  }\n\n  getMousePos(canv, e) {\n    let rect = canv.getBoundingClientRect();\n    return {\n      x: Math.round((e.clientX - rect.left) / (rect.right - rect.left) * canv.width),\n      y: Math.round((e.clientY - rect.top) / (rect.bottom - rect.top) * canv.height)\n    };\n  }\n\n  renderPlayerAngle(ctx) {\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = \"white\";\n    ctx.beginPath();\n    ctx.moveTo(265, 625);\n    ctx.lineTo(this.player.x + 100 * Math.cos(this.degreesToRadians(this.player.angle)),\n              this.player.y - 130 * Math.sin(this.degreesToRadians(this.player.angle)));\n    ctx.stroke();\n  }\n\n  animate() {\n    this.ctx.clearRect(0, 0, 550, 700);\n    this.ctx.fillStyle = 'black';\n    this.ctx.fillRect(0, 0, 550, 700);\n    if (this.turns < 50 && this.turns > 0) {\n      if (this.turns % 10 === 0) {\n        this.board.shiftRow();\n        this.turns = 0;\n      }\n    }\n    this.ctx.font = \"17px Arial\";\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fillText(`Score: ${this.score}`, 440, 650);\n    this.renderBubbles();\n    this.player.draw(this.ctx);\n    let bubble = this.player.bubble;\n    const board = this.player.board.grid;\n    this.renderPlayerAngle(this.ctx);\n    this.player.bubble.draw(this.ctx);\n    this.player.nextBubble.draw(this.ctx);\n    const cols = this.detectCollision(bubble, board);\n    if (cols.length >= 1) {\n      const closestCollision = this.findClosestCollision(cols);\n      const freeSpace = this.findFreeSpace(board, closestCollision);\n      this.findClosestSpace(bubble, board, freeSpace);\n      board[0].forEach(bubble => {\n      this.findFloaters(bubble, board);\n      });\n    }\n    if (this.gameOver()) {\n      const gameover = new Image();\n      gameover.src = './assets/gameover.png';\n      this.ctx.beginPath();\n      this.ctx.rect(0, 0, 550, 700);\n      this.ctx.fillStyle = 'rgba(0, 0, 0, .7)';\n      this.ctx.fill();\n      this.ctx.closePath();\n      this.ctx.drawImage(gameover, 170, 100, 200, 200);\n      this.ctx.fillStyle = \"white\";\n      this.ctx.fillText(\"Click to restart game...\", 180, 500 );\n    }\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  handleClick(e) {\n    if (this.state === 'ready') {\n      this.state = 'shooting';\n      this.player.bubble.loaded = true;\n      this.setAngle();\n      this.state = 'ready';\n    }\n  }\n\n  setAngle() {\n    let bubble = this.player.bubble;\n    if (bubble.pos.y === 632.6999999999999) {\n      bubble.angle = this.player.angle;\n    }\n  }\n\n  snapBubble() {\n    let bubble = this.player.bubble;\n    let board = this.board.grid;\n    let collisions = this.detectCollision(bubble, board);\n    let closestCollision = this.findClosestCollision(collisions);\n    let freeSpace = this.findFreeSpace(board, closestCollision);\n    this.findClosestSpace(bubble, freeSpace);\n}\n\n  detectCollision(bubble, board) {\n  let collisions = [];\n    if (bubble.loaded) {\n      for(let i = 0; i < board.length; i++) {\n        let row = board[i];\n        for(let j = 0; j < row.length; j++) {\n          let gridBubble = board[i][j];\n          if (gridBubble.state === \"full\") {\n            if (bubble.pos.y > gridBubble.pos.y && gridBubble.pos.y + 35 >= bubble.pos.y) {\n              if (gridBubble.pos.x >= bubble.pos.x) {\n                if (gridBubble.pos.x - 35 <= bubble.pos.x) {\n                  collisions.push({\n                    bubble: gridBubble,\n                    xDist: gridBubble.pos.x - bubble.pos.x,\n                    yDist: gridBubble.pos.y - bubble.pos.y,\n                    xAbs: Math.abs(gridBubble.pos.x - bubble.pos.x)\n                  });\n                }\n              } else {\n                  if (gridBubble.pos.x + 35 >= bubble.pos.x) {\n                    collisions.push({\n                      bubble: gridBubble,\n                      xDist: gridBubble.pos.x - bubble.pos.x,\n                      yDist: gridBubble.pos.y - bubble.pos.y,\n                      xAbs: Math.abs(gridBubble.pos.x - bubble.pos.x)\n                    });\n                  }\n                }\n              }\n\n          }\n        }\n      }\n    }\n    if (bubble.pos.y <= 5) {\n      if (this.turns % 2 === 0) {\n        bubble.shifted = true;\n      }\n      collisions.push({\n        bubble: bubble,\n        xAbs: bubble.pos.x\n      });\n    }\n    return collisions;\n  }\n\n  findClosestCollision(collisions) {\n    let closestBubble = null;\n    let distance = null;\n    for(let i = 0; i < collisions.length; i++) {\n      const colBubble = collisions[i];\n      if (closestBubble === null || colBubble.xAbs < distance) {\n        closestBubble = colBubble;\n        distance = colBubble.xAbs;\n      }\n    }\n    let collisionBubble =  {\n      closest: closestBubble,\n      distance: distance\n    };\n    return collisionBubble;\n  }\n\n  findFreeSpace(board, collisionBubble) {\n    let freeSpace = [];\n    if (collisionBubble.closest.bubble.pos.y <= 5) {\n      collisionBubble.closest.bubble.x = collisionBubble.closest.bubble.gridPos.x;\n      collisionBubble.closest.bubble.y = collisionBubble.closest.bubble.gridPos.y + 1;\n      freeSpace.push(board[collisionBubble.closest.bubble.gridPos.y + 1][collisionBubble.closest.bubble.x]);\n    } else {\n      if (!collisionBubble.closest.bubble.shifted) {\n        if(board[collisionBubble.closest.bubble.y + 1][collisionBubble.closest.bubble.x - 1] !== undefined &&\n          board[collisionBubble.closest.bubble.y + 1][collisionBubble.closest.bubble.x - 1].state === \"empty\") {\n          freeSpace.push(board[collisionBubble.closest.bubble.y + 1][collisionBubble.closest.bubble.x - 1]);\n        }\n      }\n       if (collisionBubble.closest.bubble.shifted){\n        if(board[collisionBubble.closest.bubble.y + 1][collisionBubble.closest.bubble.x + 1] !== undefined &&\n          board[collisionBubble.closest.bubble.y + 1][collisionBubble.closest.bubble.x + 1].state === \"empty\"){\n          freeSpace.push(board[collisionBubble.closest.bubble.y + 1][collisionBubble.closest.bubble.x + 1]);\n        }\n      }\n      if (board[collisionBubble.closest.bubble.y][collisionBubble.closest.bubble.x - 1] !== undefined &&\n        board[collisionBubble.closest.bubble.y][collisionBubble.closest.bubble.x - 1].state === \"empty\") {\n        freeSpace.push(board[collisionBubble.closest.bubble.y][collisionBubble.closest.bubble.x - 1]);\n      }\n      if (board[collisionBubble.closest.bubble.y][collisionBubble.closest.bubble.x + 1] !== undefined &&\n        board[collisionBubble.closest.bubble.y][collisionBubble.closest.bubble.x + 1].state === \"empty\") {\n        freeSpace.push(board[collisionBubble.closest.bubble.y][collisionBubble.closest.bubble.x + 1]);\n      }\n      if (board[collisionBubble.closest.bubble.y + 1][collisionBubble.closest.bubble.x] !== undefined &&\n        board[collisionBubble.closest.bubble.y + 1][collisionBubble.closest.bubble.x].state === \"empty\") {\n        freeSpace.push(board[collisionBubble.closest.bubble.y + 1][collisionBubble.closest.bubble.x]);\n      }\n    }\n  return freeSpace;\n  }\n\n  gameOver() {\n    for(let i = 0; i < 15; i++) {\n      if (this.board.grid[17][i].state === \"full\") {\n        this.state = 'gameover';\n        return true;\n      }\n    }\n    return false;\n  }\n\n  findClosestSpace(bubble, board, freeSpace) {\n    let closest = null;\n    let distance = null;\n    freeSpace.forEach(space => {\n      const dist = Math.abs((space.pos.x) - (bubble.pos.x));\n      if (closest === null || dist < distance) {\n        closest = space;\n        distance = dist;\n      }\n    });\n    if(closest) {\n    board[closest.y][closest.x] = bubble;\n    bubble.x = closest.x;\n      if (closest.y > 0 && board[closest.y - 1][closest.x].shifted === false) {\n        bubble.shifted = true;\n      }\n    bubble.gridPos.x = closest.x;\n    bubble.y = closest.y;\n    bubble.gridPos.y = closest.y;\n    this.clusters(bubble);\n    bubble.loaded = false;\n    let nextBubble = this.player.nextBubble;\n    nextBubble.x = 7;\n    this.player.bubble = nextBubble;\n    this.player.nextBubble = new Bubble(5, 18, colors[Math.floor(Math.random()*colors.length)], false, {}, \"full\");\n    this.turns += 1;\n    }\n  }\n\n  findNeighbors(bubble, board) {\n    let neighbors = [];\n      if (bubble.x === 0 && bubble.y === 0) {\n        if(bubble.shifted) {\n          if(board[bubble.y + 1][bubble.x + 1].state === \"full\") {\n            neighbors.push(board[bubble.y + 1][bubble.x + 1]);\n          }\n        }\n          if(board[bubble.y][bubble.x + 1].state === \"full\") {\n            neighbors.push(board[bubble.y][bubble.x + 1]);\n          }\n      } else if (bubble.x === 14 && bubble.y === 0) {\n        if (!bubble.shifted) {\n          if(board[bubble.y + 1][bubble.x - 1].state === \"full\") {\n            neighbors.push(board[bubble.y + 1][bubble.x - 1]);\n          }\n        }\n          if(board[bubble.y][bubble.x - 1].state === \"full\") {\n            neighbors.push(board[bubble.y][bubble.x - 1]);\n          }\n      } else if (bubble.y === 0) {\n        if (bubble.shifted) {\n          if(board[bubble.y + 1][bubble.x + 1].state === \"full\") {\n            neighbors.push(board[bubble.y + 1][bubble.x + 1]);\n          }\n        } else {\n            if(board[bubble.y + 1][bubble.x - 1].state === \"full\") {\n              neighbors.push(board[bubble.y + 1][bubble.x - 1]);\n            }\n          }\n          if(board[bubble.y][bubble.x + 1].state === \"full\") {\n            neighbors.push(board[bubble.y][bubble.x + 1]);\n          }\n          if(board[bubble.y][bubble.x - 1].state === \"full\") {\n            neighbors.push(board[bubble.y][bubble.x - 1]);\n          }\n      } else if (bubble.x === 0) {\n        if (bubble.shifted) {\n          if (board[bubble.y - 1][bubble.x + 1].state === \"full\") {\n            neighbors.push(board[bubble.y - 1][bubble.x + 1]);\n          }\n          if(board[bubble.y + 1][bubble.x + 1].state === \"full\") {\n                neighbors.push(board[bubble.y + 1][bubble.x + 1]);\n          }\n        }\n        if (board[bubble.y - 1][bubble.x].state === \"full\") {\n          neighbors.push(board[bubble.y - 1][bubble.x]);\n        }\n        if(board[bubble.y][bubble.x + 1].state === \"full\") {\n          neighbors.push(board[bubble.y][bubble.x + 1]);\n        }\n      } else if (bubble.x === 14) {\n        if (!bubble.shifted) {\n          if(board[bubble.y + 1][bubble.x - 1].state === \"full\") {\n            neighbors.push(board[bubble.y + 1][bubble.x - 1]);\n          }\n          if (board[bubble.y - 1][bubble.x - 1].state === \"full\") {\n            neighbors.push(board[bubble.y - 1][bubble.x - 1]);\n          }\n        }\n          if (board[bubble.y - 1][bubble.x].state === \"full\") {\n            neighbors.push(board[bubble.y - 1][bubble.x]);\n          }\n          if(board[bubble.y][bubble.x - 1].state === \"full\") {\n            neighbors.push(board[bubble.y][bubble.x - 1]);\n          }\n      } else {\n          if (bubble.shifted) {\n            if (board[bubble.y - 1][bubble.x] !== undefined && board[bubble.y - 1][bubble.x].state === \"full\") {\n              neighbors.push(board[bubble.y - 1][bubble.x]);\n            }\n            if (board[bubble.y - 1][bubble.x + 1] !== undefined && board[bubble.y - 1][bubble.x + 1].state === \"full\") {\n              neighbors.push(board[bubble.y - 1][bubble.x + 1]);\n            }\n            if(board[bubble.y][bubble.x + 1] !== undefined && board[bubble.y][bubble.x + 1].state === \"full\") {\n              neighbors.push(board[bubble.y][bubble.x + 1]);\n            }\n            if(board[bubble.y][bubble.x - 1] !== undefined && board[bubble.y][bubble.x - 1].state === \"full\") {\n              neighbors.push(board[bubble.y][bubble.x - 1]);\n            }\n            if(board[bubble.y + 1][bubble.x + 1] !== undefined && board[bubble.y + 1][bubble.x + 1].state === \"full\") {\n              neighbors.push(board[bubble.y + 1][bubble.x + 1]);\n            }\n        } else {\n          if (board[bubble.y - 1][bubble.x - 1] !== undefined && board[bubble.y - 1][bubble.x - 1].state === \"full\") {\n            neighbors.push(board[bubble.y - 1][bubble.x - 1]);\n          }\n          if (board[bubble.y - 1][bubble.x] !== undefined && board[bubble.y - 1][bubble.x].state === \"full\") {\n            neighbors.push(board[bubble.y - 1][bubble.x]);\n          }\n          if(board[bubble.y][bubble.x - 1] !== undefined && board[bubble.y][bubble.x - 1].state === \"full\") {\n            neighbors.push(board[bubble.y][bubble.x - 1]);\n          }\n          if(board[bubble.y][bubble.x + 1] !== undefined && board[bubble.y][bubble.x + 1].state === \"full\") {\n            neighbors.push(board[bubble.y][bubble.x + 1]);\n          }\n          if(board[bubble.y + 1][bubble.x - 1] !== undefined && board[bubble.y + 1][bubble.x - 1].state === \"full\") {\n            neighbors.push(board[bubble.y + 1][bubble.x - 1]);\n          }\n        }\n      }\n    if(board[bubble.y + 1][bubble.x] !== undefined && board[bubble.y + 1][bubble.x].state === \"full\") {\n      neighbors.push(board[bubble.y + 1][bubble.x]);\n    }\n    return neighbors;\n  }\n\n  clusters(bubble) {\n    const snap = new Audio(\"./assets/snap.mp3\");\n    const pop = new Audio(\"./assets/pop.mp3\");\n    const color = bubble.color;\n    let checked = [];\n    let queue = [bubble];\n    while (queue.length >= 1) {\n      let current = queue.shift();\n      let children = this.findNeighbors(current, this.board.grid);\n      children.forEach(child => {\n      if (child.color === color){\n          if (!queue.includes(child) && !checked.includes(child)) {\n            queue.push(child);\n          }\n        }\n      });\n      if (!checked.includes(current)) {\n        checked.push(current);\n      }\n    }\n    if (checked.length >= 3) {\n      pop.play();\n      checked.forEach(bubble => {\n        this.score += 200;\n        bubble.color = null;\n        bubble.state = \"empty\";\n      });\n    } else {\n        snap.play();\n    }\n  }\n\n  bfsNeighbors(bubble, board) {\n    let neighbors = [];\n    const n1 = board[bubble.y + 1][bubble.x];\n    const n2 = board[bubble.y + 1][bubble.x + 1];\n    const n3 = board[bubble.y + 1][bubble.x - 1];\n    const n4 = board[bubble.y][bubble.x + 1];\n    const n5 = board[bubble.y][bubble.x - 1];\n    if (bubble.state === \"full\") {\n      if (bubble.shifted) {\n        if (bubble.x < 14) {\n          if (n2.state === \"full\") {\n            neighbors.push(n2);\n          }\n          if (n4.state === \"full\") {\n            neighbors.push(n4);\n          }\n        }\n      } else {\n          if (bubble.x > 0) {\n            if (n3.state === \"full\") {\n              neighbors.push(n3);\n          }\n          if (n5.state === \"full\") {\n            neighbors.push(n5);\n          }\n        }\n      }\n      if (n1.state === \"full\") {\n        neighbors.push(n1);\n      }\n    }\n    return neighbors;\n  }\n\n  won(){\n    this.board.grid.forEach(row => {\n      row.every(node => {\n        return node.state === \"empty\";\n      });\n    });\n  }\n\n  findFloaters(bubble, board) {\n    const top = board[0];\n    let checked = [];\n    top.forEach( bubble => {\n      let queue = [bubble];\n      while(queue.length > 0) {\n        const current = queue.shift();\n        checked.push(current);\n        let children;\n        if (top.includes(current)) {\n          children = this.bfsNeighbors(current, board);\n        } else {\n          children = this.findNeighbors(current, board);\n        }\n        children.forEach(child => {\n          if (!queue.includes(child) && !checked.includes(child))\n          queue.push(child);\n          checked.push(child);\n        });\n      }\n    });\n    board.forEach(row => {\n      row.forEach(bubble => {\n        if (!checked.includes(bubble)) {\n        bubble.color = null;\n        bubble.state = \"empty\";\n        }\n      });\n    });\n    return checked;\n  }\n\n}\n\n\nexport default Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 3\n// module chunks = 0","import Bubble from './bubble';\n\nconst colors = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"white\"];\n\nclass Player {\n  constructor(board) {\n    this.name = name;\n    this.board = board;\n    this.score = 0;\n    this.x = 266.4;\n    this.y = 675;\n    this.angle = 90;\n    this.bubble = new Bubble(7, 18, colors[Math.floor(Math.random()*colors.length)], false, {xPos: 266.4, yPos: 632.6999999999999}, \"full\");\n    this.nextBubble = new Bubble(5, 18, colors[Math.floor(Math.random()*colors.length)], false, {}, \"full\");\n    this.score = 0;\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, 70, 0, 2*Math.PI, true);\n    ctx.strokeStyle = \"white\";\n    ctx.lineWidth = 3;\n    ctx.stroke();\n  }\n\n}\n\nexport default Player;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/player.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}